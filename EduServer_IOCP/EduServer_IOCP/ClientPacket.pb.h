// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientPacket.proto

#ifndef PROTOBUF_ClientPacket_2eproto__INCLUDED
#define PROTOBUF_ClientPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace ClientPacket {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientPacket_2eproto();
void protobuf_AssignDesc_ClientPacket_2eproto();
void protobuf_ShutdownFile_ClientPacket_2eproto();

class LoginRequest;
class Position;
class LoginResult;
class ChatRequest;
class ChatResult;
class MoveRequest;
class MoveResult;
class SightRequest;
class SightResult;
class SightResult_InSightPlayer;

enum MessageType {
  PKT_CS_LOGIN = 1,
  PKT_SC_LOGIN = 2,
  PKT_CS_CHAT = 3,
  PKT_SC_CHAT = 4,
  PKT_CS_MOVE = 5,
  PKT_SC_MOVE = 6,
  PKT_CS_SIGHT = 7,
  PKT_SC_SIGHT = 8
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = PKT_CS_LOGIN;
const MessageType MessageType_MAX = PKT_SC_SIGHT;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

// ===================================================================

class LoginRequest : public ::google::protobuf::MessageLite {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClientPacket.LoginRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playerid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::MessageLite {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Position& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Position* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:ClientPacket.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class LoginResult : public ::google::protobuf::MessageLite {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LoginResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginResult* other);

  // implements Message ----------------------------------------------

  LoginResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required .ClientPacket.Position PlayerPos = 3;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 3;
  inline const ::ClientPacket::Position& playerpos() const;
  inline ::ClientPacket::Position* mutable_playerpos();
  inline ::ClientPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::ClientPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:ClientPacket.LoginResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::ClientPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class ChatRequest : public ::google::protobuf::MessageLite {
 public:
  ChatRequest();
  virtual ~ChatRequest();

  ChatRequest(const ChatRequest& from);

  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ChatRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatRequest* other);

  // implements Message ----------------------------------------------

  ChatRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatRequest& from);
  void MergeFrom(const ChatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string PlayerMessage = 2;
  inline bool has_playermessage() const;
  inline void clear_playermessage();
  static const int kPlayerMessageFieldNumber = 2;
  inline const ::std::string& playermessage() const;
  inline void set_playermessage(const ::std::string& value);
  inline void set_playermessage(const char* value);
  inline void set_playermessage(const char* value, size_t size);
  inline ::std::string* mutable_playermessage();
  inline ::std::string* release_playermessage();
  inline void set_allocated_playermessage(::std::string* playermessage);

  // @@protoc_insertion_point(class_scope:ClientPacket.ChatRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playermessage();
  inline void clear_has_playermessage();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playermessage_;
  ::google::protobuf::int32 playerid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static ChatRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatResult : public ::google::protobuf::MessageLite {
 public:
  ChatResult();
  virtual ~ChatResult();

  ChatResult(const ChatResult& from);

  inline ChatResult& operator=(const ChatResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ChatResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatResult* other);

  // implements Message ----------------------------------------------

  ChatResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatResult& from);
  void MergeFrom(const ChatResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string PlayerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required string PlayerMessage = 2;
  inline bool has_playermessage() const;
  inline void clear_playermessage();
  static const int kPlayerMessageFieldNumber = 2;
  inline const ::std::string& playermessage() const;
  inline void set_playermessage(const ::std::string& value);
  inline void set_playermessage(const char* value);
  inline void set_playermessage(const char* value, size_t size);
  inline ::std::string* mutable_playermessage();
  inline ::std::string* release_playermessage();
  inline void set_allocated_playermessage(::std::string* playermessage);

  // @@protoc_insertion_point(class_scope:ClientPacket.ChatResult)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playermessage();
  inline void clear_has_playermessage();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::std::string* playermessage_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static ChatResult* default_instance_;
};
// -------------------------------------------------------------------

class MoveRequest : public ::google::protobuf::MessageLite {
 public:
  MoveRequest();
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MoveRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MoveRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MoveRequest* other);

  // implements Message ----------------------------------------------

  MoveRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required .ClientPacket.Position PlayerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::ClientPacket::Position& playerpos() const;
  inline ::ClientPacket::Position* mutable_playerpos();
  inline ::ClientPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::ClientPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:ClientPacket.MoveRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ClientPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static MoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class MoveResult : public ::google::protobuf::MessageLite {
 public:
  MoveResult();
  virtual ~MoveResult();

  MoveResult(const MoveResult& from);

  inline MoveResult& operator=(const MoveResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MoveResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MoveResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MoveResult* other);

  // implements Message ----------------------------------------------

  MoveResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MoveResult& from);
  void MergeFrom(const MoveResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required .ClientPacket.Position PlayerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::ClientPacket::Position& playerpos() const;
  inline ::ClientPacket::Position* mutable_playerpos();
  inline ::ClientPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::ClientPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:ClientPacket.MoveResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ClientPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static MoveResult* default_instance_;
};
// -------------------------------------------------------------------

class SightRequest : public ::google::protobuf::MessageLite {
 public:
  SightRequest();
  virtual ~SightRequest();

  SightRequest(const SightRequest& from);

  inline SightRequest& operator=(const SightRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SightRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SightRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SightRequest* other);

  // implements Message ----------------------------------------------

  SightRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SightRequest& from);
  void MergeFrom(const SightRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required float SightRadius = 2;
  inline bool has_sightradius() const;
  inline void clear_sightradius();
  static const int kSightRadiusFieldNumber = 2;
  inline float sightradius() const;
  inline void set_sightradius(float value);

  // @@protoc_insertion_point(class_scope:ClientPacket.SightRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_sightradius();
  inline void clear_has_sightradius();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playerid_;
  float sightradius_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static SightRequest* default_instance_;
};
// -------------------------------------------------------------------

class SightResult_InSightPlayer : public ::google::protobuf::MessageLite {
 public:
  SightResult_InSightPlayer();
  virtual ~SightResult_InSightPlayer();

  SightResult_InSightPlayer(const SightResult_InSightPlayer& from);

  inline SightResult_InSightPlayer& operator=(const SightResult_InSightPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SightResult_InSightPlayer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SightResult_InSightPlayer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SightResult_InSightPlayer* other);

  // implements Message ----------------------------------------------

  SightResult_InSightPlayer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SightResult_InSightPlayer& from);
  void MergeFrom(const SightResult_InSightPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string PlayerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required .ClientPacket.Position PlayerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::ClientPacket::Position& playerpos() const;
  inline ::ClientPacket::Position* mutable_playerpos();
  inline ::ClientPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::ClientPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:ClientPacket.SightResult.InSightPlayer)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::ClientPacket::Position* playerpos_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static SightResult_InSightPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SightResult : public ::google::protobuf::MessageLite {
 public:
  SightResult();
  virtual ~SightResult();

  SightResult(const SightResult& from);

  inline SightResult& operator=(const SightResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SightResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SightResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SightResult* other);

  // implements Message ----------------------------------------------

  SightResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SightResult& from);
  void MergeFrom(const SightResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SightResult_InSightPlayer InSightPlayer;

  // accessors -------------------------------------------------------

  // repeated .ClientPacket.SightResult.InSightPlayer inSightPlayer = 1;
  inline int insightplayer_size() const;
  inline void clear_insightplayer();
  static const int kInSightPlayerFieldNumber = 1;
  inline const ::ClientPacket::SightResult_InSightPlayer& insightplayer(int index) const;
  inline ::ClientPacket::SightResult_InSightPlayer* mutable_insightplayer(int index);
  inline ::ClientPacket::SightResult_InSightPlayer* add_insightplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::ClientPacket::SightResult_InSightPlayer >&
      insightplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClientPacket::SightResult_InSightPlayer >*
      mutable_insightplayer();

  // @@protoc_insertion_point(class_scope:ClientPacket.SightResult)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ClientPacket::SightResult_InSightPlayer > insightplayer_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientPacket_2eproto();
  friend void protobuf_ShutdownFile_ClientPacket_2eproto();

  void InitAsDefaultInstance();
  static SightResult* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required int32 PlayerId = 1;
inline bool LoginRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 LoginRequest::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.LoginRequest.PlayerId)
  return playerid_;
}
inline void LoginRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.LoginRequest.PlayerId)
}

// -------------------------------------------------------------------

// Position

// required float x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:ClientPacket.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.Position.x)
}

// required float y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:ClientPacket.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.Position.y)
}

// required float z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:ClientPacket.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.Position.z)
}

// -------------------------------------------------------------------

// LoginResult

// required int32 PlayerId = 1;
inline bool LoginResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 LoginResult::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.LoginResult.PlayerId)
  return playerid_;
}
inline void LoginResult::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.LoginResult.PlayerId)
}

// required string PlayerName = 2;
inline bool LoginResult::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& LoginResult::playername() const {
  // @@protoc_insertion_point(field_get:ClientPacket.LoginResult.PlayerName)
  return *playername_;
}
inline void LoginResult::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:ClientPacket.LoginResult.PlayerName)
}
inline void LoginResult::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPacket.LoginResult.PlayerName)
}
inline void LoginResult::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.LoginResult.PlayerName)
}
inline ::std::string* LoginResult::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.LoginResult.PlayerName)
  return playername_;
}
inline ::std::string* LoginResult::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginResult::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.LoginResult.PlayerName)
}

// required .ClientPacket.Position PlayerPos = 3;
inline bool LoginResult::has_playerpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResult::set_has_playerpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResult::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResult::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::ClientPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::ClientPacket::Position& LoginResult::playerpos() const {
  // @@protoc_insertion_point(field_get:ClientPacket.LoginResult.PlayerPos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::ClientPacket::Position* LoginResult::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::ClientPacket::Position;
  // @@protoc_insertion_point(field_mutable:ClientPacket.LoginResult.PlayerPos)
  return playerpos_;
}
inline ::ClientPacket::Position* LoginResult::release_playerpos() {
  clear_has_playerpos();
  ::ClientPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void LoginResult::set_allocated_playerpos(::ClientPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.LoginResult.PlayerPos)
}

// -------------------------------------------------------------------

// ChatRequest

// required int32 PlayerId = 1;
inline bool ChatRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 ChatRequest::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.ChatRequest.PlayerId)
  return playerid_;
}
inline void ChatRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.ChatRequest.PlayerId)
}

// required string PlayerMessage = 2;
inline bool ChatRequest::has_playermessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRequest::set_has_playermessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRequest::clear_has_playermessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRequest::clear_playermessage() {
  if (playermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_->clear();
  }
  clear_has_playermessage();
}
inline const ::std::string& ChatRequest::playermessage() const {
  // @@protoc_insertion_point(field_get:ClientPacket.ChatRequest.PlayerMessage)
  return *playermessage_;
}
inline void ChatRequest::set_playermessage(const ::std::string& value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
  // @@protoc_insertion_point(field_set:ClientPacket.ChatRequest.PlayerMessage)
}
inline void ChatRequest::set_playermessage(const char* value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPacket.ChatRequest.PlayerMessage)
}
inline void ChatRequest::set_playermessage(const char* value, size_t size) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.ChatRequest.PlayerMessage)
}
inline ::std::string* ChatRequest::mutable_playermessage() {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.ChatRequest.PlayerMessage)
  return playermessage_;
}
inline ::std::string* ChatRequest::release_playermessage() {
  clear_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playermessage_;
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRequest::set_allocated_playermessage(::std::string* playermessage) {
  if (playermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playermessage_;
  }
  if (playermessage) {
    set_has_playermessage();
    playermessage_ = playermessage;
  } else {
    clear_has_playermessage();
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.ChatRequest.PlayerMessage)
}

// -------------------------------------------------------------------

// ChatResult

// required string PlayerName = 1;
inline bool ChatResult::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatResult::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatResult::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatResult::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& ChatResult::playername() const {
  // @@protoc_insertion_point(field_get:ClientPacket.ChatResult.PlayerName)
  return *playername_;
}
inline void ChatResult::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:ClientPacket.ChatResult.PlayerName)
}
inline void ChatResult::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPacket.ChatResult.PlayerName)
}
inline void ChatResult::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.ChatResult.PlayerName)
}
inline ::std::string* ChatResult::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.ChatResult.PlayerName)
  return playername_;
}
inline ::std::string* ChatResult::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatResult::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.ChatResult.PlayerName)
}

// required string PlayerMessage = 2;
inline bool ChatResult::has_playermessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatResult::set_has_playermessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatResult::clear_has_playermessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatResult::clear_playermessage() {
  if (playermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_->clear();
  }
  clear_has_playermessage();
}
inline const ::std::string& ChatResult::playermessage() const {
  // @@protoc_insertion_point(field_get:ClientPacket.ChatResult.PlayerMessage)
  return *playermessage_;
}
inline void ChatResult::set_playermessage(const ::std::string& value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
  // @@protoc_insertion_point(field_set:ClientPacket.ChatResult.PlayerMessage)
}
inline void ChatResult::set_playermessage(const char* value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPacket.ChatResult.PlayerMessage)
}
inline void ChatResult::set_playermessage(const char* value, size_t size) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.ChatResult.PlayerMessage)
}
inline ::std::string* ChatResult::mutable_playermessage() {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playermessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.ChatResult.PlayerMessage)
  return playermessage_;
}
inline ::std::string* ChatResult::release_playermessage() {
  clear_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playermessage_;
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatResult::set_allocated_playermessage(::std::string* playermessage) {
  if (playermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playermessage_;
  }
  if (playermessage) {
    set_has_playermessage();
    playermessage_ = playermessage;
  } else {
    clear_has_playermessage();
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.ChatResult.PlayerMessage)
}

// -------------------------------------------------------------------

// MoveRequest

// required int32 PlayerId = 1;
inline bool MoveRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 MoveRequest::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.MoveRequest.PlayerId)
  return playerid_;
}
inline void MoveRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.MoveRequest.PlayerId)
}

// required .ClientPacket.Position PlayerPos = 2;
inline bool MoveRequest::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveRequest::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveRequest::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveRequest::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::ClientPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::ClientPacket::Position& MoveRequest::playerpos() const {
  // @@protoc_insertion_point(field_get:ClientPacket.MoveRequest.PlayerPos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::ClientPacket::Position* MoveRequest::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::ClientPacket::Position;
  // @@protoc_insertion_point(field_mutable:ClientPacket.MoveRequest.PlayerPos)
  return playerpos_;
}
inline ::ClientPacket::Position* MoveRequest::release_playerpos() {
  clear_has_playerpos();
  ::ClientPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void MoveRequest::set_allocated_playerpos(::ClientPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.MoveRequest.PlayerPos)
}

// -------------------------------------------------------------------

// MoveResult

// required int32 PlayerId = 1;
inline bool MoveResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveResult::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 MoveResult::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.MoveResult.PlayerId)
  return playerid_;
}
inline void MoveResult::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.MoveResult.PlayerId)
}

// required .ClientPacket.Position PlayerPos = 2;
inline bool MoveResult::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveResult::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveResult::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveResult::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::ClientPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::ClientPacket::Position& MoveResult::playerpos() const {
  // @@protoc_insertion_point(field_get:ClientPacket.MoveResult.PlayerPos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::ClientPacket::Position* MoveResult::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::ClientPacket::Position;
  // @@protoc_insertion_point(field_mutable:ClientPacket.MoveResult.PlayerPos)
  return playerpos_;
}
inline ::ClientPacket::Position* MoveResult::release_playerpos() {
  clear_has_playerpos();
  ::ClientPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void MoveResult::set_allocated_playerpos(::ClientPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.MoveResult.PlayerPos)
}

// -------------------------------------------------------------------

// SightRequest

// required int32 PlayerId = 1;
inline bool SightRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SightRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SightRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SightRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 SightRequest::playerid() const {
  // @@protoc_insertion_point(field_get:ClientPacket.SightRequest.PlayerId)
  return playerid_;
}
inline void SightRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.SightRequest.PlayerId)
}

// required float SightRadius = 2;
inline bool SightRequest::has_sightradius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SightRequest::set_has_sightradius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SightRequest::clear_has_sightradius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SightRequest::clear_sightradius() {
  sightradius_ = 0;
  clear_has_sightradius();
}
inline float SightRequest::sightradius() const {
  // @@protoc_insertion_point(field_get:ClientPacket.SightRequest.SightRadius)
  return sightradius_;
}
inline void SightRequest::set_sightradius(float value) {
  set_has_sightradius();
  sightradius_ = value;
  // @@protoc_insertion_point(field_set:ClientPacket.SightRequest.SightRadius)
}

// -------------------------------------------------------------------

// SightResult_InSightPlayer

// required string PlayerName = 1;
inline bool SightResult_InSightPlayer::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SightResult_InSightPlayer::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SightResult_InSightPlayer::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SightResult_InSightPlayer::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& SightResult_InSightPlayer::playername() const {
  // @@protoc_insertion_point(field_get:ClientPacket.SightResult.InSightPlayer.PlayerName)
  return *playername_;
}
inline void SightResult_InSightPlayer::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:ClientPacket.SightResult.InSightPlayer.PlayerName)
}
inline void SightResult_InSightPlayer::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPacket.SightResult.InSightPlayer.PlayerName)
}
inline void SightResult_InSightPlayer::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.SightResult.InSightPlayer.PlayerName)
}
inline ::std::string* SightResult_InSightPlayer::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.SightResult.InSightPlayer.PlayerName)
  return playername_;
}
inline ::std::string* SightResult_InSightPlayer::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SightResult_InSightPlayer::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.SightResult.InSightPlayer.PlayerName)
}

// required .ClientPacket.Position PlayerPos = 2;
inline bool SightResult_InSightPlayer::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SightResult_InSightPlayer::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SightResult_InSightPlayer::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SightResult_InSightPlayer::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::ClientPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::ClientPacket::Position& SightResult_InSightPlayer::playerpos() const {
  // @@protoc_insertion_point(field_get:ClientPacket.SightResult.InSightPlayer.PlayerPos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::ClientPacket::Position* SightResult_InSightPlayer::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::ClientPacket::Position;
  // @@protoc_insertion_point(field_mutable:ClientPacket.SightResult.InSightPlayer.PlayerPos)
  return playerpos_;
}
inline ::ClientPacket::Position* SightResult_InSightPlayer::release_playerpos() {
  clear_has_playerpos();
  ::ClientPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void SightResult_InSightPlayer::set_allocated_playerpos(::ClientPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.SightResult.InSightPlayer.PlayerPos)
}

// -------------------------------------------------------------------

// SightResult

// repeated .ClientPacket.SightResult.InSightPlayer inSightPlayer = 1;
inline int SightResult::insightplayer_size() const {
  return insightplayer_.size();
}
inline void SightResult::clear_insightplayer() {
  insightplayer_.Clear();
}
inline const ::ClientPacket::SightResult_InSightPlayer& SightResult::insightplayer(int index) const {
  // @@protoc_insertion_point(field_get:ClientPacket.SightResult.inSightPlayer)
  return insightplayer_.Get(index);
}
inline ::ClientPacket::SightResult_InSightPlayer* SightResult::mutable_insightplayer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientPacket.SightResult.inSightPlayer)
  return insightplayer_.Mutable(index);
}
inline ::ClientPacket::SightResult_InSightPlayer* SightResult::add_insightplayer() {
  // @@protoc_insertion_point(field_add:ClientPacket.SightResult.inSightPlayer)
  return insightplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClientPacket::SightResult_InSightPlayer >&
SightResult::insightplayer() const {
  // @@protoc_insertion_point(field_list:ClientPacket.SightResult.inSightPlayer)
  return insightplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClientPacket::SightResult_InSightPlayer >*
SightResult::mutable_insightplayer() {
  // @@protoc_insertion_point(field_mutable_list:ClientPacket.SightResult.inSightPlayer)
  return &insightplayer_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientPacket

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientPacket_2eproto__INCLUDED
